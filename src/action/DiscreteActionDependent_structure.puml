startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": true,
    "hideDataStructures": true,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "action.DiscreteActionDependent"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_110364485 { 
   	label=timer
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   DateTimer110364485[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DateTimer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   it: Iterator&lt;Integer&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   lapsTimes: Vector&lt;Integer&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ next(): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MergedTimer110364485[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MergedTimer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   timer1: Timer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timer2: Timer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ next(): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OneShotTimer110364485[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OneShotTimer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   at: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hasNext: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ next(): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PeriodicTimer110364485[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PeriodicTimer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   moreOrLess: RandomTimer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   next: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   period: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ next(): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RandomTimer110364485[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RandomTimer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   distribution: randomDistribution [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hilim: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lolim: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mean: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   r: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rate: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ distribution2String(distribution: randomDistribution): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): Integer</TD></TR>
<TR><TD ALIGN="LEFT" >- nextTimeExp(): int</TD></TR>
<TR><TD ALIGN="LEFT" >- nextTimeGaussian(): int</TD></TR>
<TR><TD ALIGN="LEFT" >- nextTimePoisson(): int</TD></TR>
<TR><TD ALIGN="LEFT" >- nextTimePosibilist(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ string2Distribution(distributionName: String): randomDistribution</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TimeBoundedTimer110364485[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TimeBoundedTimer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   hasNext: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   next: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   startTime: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stopTime: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   time: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timer2bound: Timer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- init()</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1422950858 { 
   	label=action
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   DiscreteAction1422950858[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DiscreteAction</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   lapsTime: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   logger: Logger [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   method: Method [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   object: Object [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timmer: Timer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ compareTo(c: DiscreteActionInterface): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): DiscreteActionInterface</TD></TR>
<TR><TD ALIGN="LEFT" >+ spendTime(t: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DiscreteActionDependent1422950858[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DiscreteActionDependent</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   baseAction: DiscreteAction [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   currentAction: DiscreteAction [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   depedentActions: TreeSet&lt;DiscreteAction&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   it: Iterator&lt;DiscreteAction&gt; [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addDependence(o: Object, depentMethodName: String, timerDependence: Timer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ compareTo(c: DiscreteActionInterface): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): DiscreteActionInterface</TD></TR>
<TR><TD ALIGN="LEFT" >+ nextMethod()</TD></TR>
<TR><TD ALIGN="LEFT" >- reInit()</TD></TR>
<TR><TD ALIGN="LEFT" >+ spendTime(t: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateTimeLaps()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DiscreteActionOnOffDependent1422950858[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DiscreteActionOnOffDependent</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   currentAction: DiscreteActionInterface [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentLapsTime: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   lastOffDelay: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   offAction: DiscreteActionInterface [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   onAction: DiscreteActionInterface [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ compareTo(c: DiscreteActionInterface): int</TD></TR>
<TR><TD ALIGN="LEFT" >- dates2Timalapse(datesOn: TreeSet&lt;Integer&gt;, datesOff: TreeSet&lt;Integer&gt;, timeLapseOn: Vector&lt;Integer&gt;, timeLapseOff: Vector&lt;Integer&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ next(): DiscreteActionInterface</TD></TR>
<TR><TD ALIGN="LEFT" >+ nextAction()</TD></TR>
<TR><TD ALIGN="LEFT" >+ spendTime(t: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1765246937 { 
   	label=discreteBehaviorSimulator
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   DiscreteActionSimulator1765246937[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DiscreteActionSimulator</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   actionsList: Vector&lt;DiscreteActionInterface&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   globalTime: Clock [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   logConsole: ConsoleHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   logFile: FileHandler [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   logger: Logger [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nbLoop: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   running: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   step: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   t: Thread [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addAction(c: DiscreteActionInterface)</TD></TR>
<TR><TD ALIGN="LEFT" >- nextLapsTime(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
<TR><TD ALIGN="LEFT" >- runAction(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ start()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
<TR><TD ALIGN="LEFT" >- updateTimes(runningTimeOf1stCapsul: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
DiscreteAction1422950858 -> DateTimer110364485[arrowhead=none, arrowtail=empty, dir=both];
DiscreteAction1422950858 -> MergedTimer110364485[arrowhead=none, arrowtail=empty, dir=both];
DiscreteAction1422950858 -> OneShotTimer110364485[arrowhead=none, arrowtail=empty, dir=both];
DiscreteAction1422950858 -> PeriodicTimer110364485[arrowhead=none, arrowtail=empty, dir=both];
DiscreteAction1422950858 -> RandomTimer110364485[arrowhead=none, arrowtail=empty, dir=both];
DiscreteAction1422950858 -> TimeBoundedTimer110364485[arrowhead=none, arrowtail=empty, dir=both];
DiscreteActionDependent1422950858 -> DiscreteAction1422950858[arrowhead=none, arrowtail=empty, dir=both];
DiscreteActionDependent1422950858 -> DiscreteAction1422950858[label="baseAction
[0..1]"];
DiscreteActionDependent1422950858 -> DiscreteAction1422950858[label="currentAction
[0..1]"];
DiscreteActionDependent1422950858 -> DiscreteAction1422950858[label="depedentActions
[0..*]"];
DiscreteActionDependent1422950858 -> DiscreteAction1422950858[label="it
[0..1]"];
DiscreteActionDependent1422950858 -> DiscreteActionOnOffDependent1422950858[arrowhead=none, arrowtail=empty, dir=both];
DiscreteActionSimulator1765246937 -> DiscreteActionDependent1422950858[label="actionsList
[0..*]"];
PeriodicTimer110364485 -> RandomTimer110364485[label="moreOrLess
[0..1]"];
    
}
@enduml